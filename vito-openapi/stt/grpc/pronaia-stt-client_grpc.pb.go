// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pronaia-stt-client.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OnlineDecoderClient is the client API for OnlineDecoder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnlineDecoderClient interface {
	// Sends multiple greetings
	Decode(ctx context.Context, opts ...grpc.CallOption) (OnlineDecoder_DecodeClient, error)
}

type onlineDecoderClient struct {
	cc grpc.ClientConnInterface
}

func NewOnlineDecoderClient(cc grpc.ClientConnInterface) OnlineDecoderClient {
	return &onlineDecoderClient{cc}
}

func (c *onlineDecoderClient) Decode(ctx context.Context, opts ...grpc.CallOption) (OnlineDecoder_DecodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &OnlineDecoder_ServiceDesc.Streams[0], "/online_decoder.OnlineDecoder/Decode", opts...)
	if err != nil {
		return nil, err
	}
	x := &onlineDecoderDecodeClient{stream}
	return x, nil
}

type OnlineDecoder_DecodeClient interface {
	Send(*DecoderRequest) error
	Recv() (*DecoderResponse, error)
	grpc.ClientStream
}

type onlineDecoderDecodeClient struct {
	grpc.ClientStream
}

func (x *onlineDecoderDecodeClient) Send(m *DecoderRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *onlineDecoderDecodeClient) Recv() (*DecoderResponse, error) {
	m := new(DecoderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OnlineDecoderServer is the server API for OnlineDecoder service.
// All implementations must embed UnimplementedOnlineDecoderServer
// for forward compatibility
type OnlineDecoderServer interface {
	// Sends multiple greetings
	Decode(OnlineDecoder_DecodeServer) error
	mustEmbedUnimplementedOnlineDecoderServer()
}

// UnimplementedOnlineDecoderServer must be embedded to have forward compatible implementations.
type UnimplementedOnlineDecoderServer struct {
}

func (UnimplementedOnlineDecoderServer) Decode(OnlineDecoder_DecodeServer) error {
	return status.Errorf(codes.Unimplemented, "method Decode not implemented")
}
func (UnimplementedOnlineDecoderServer) mustEmbedUnimplementedOnlineDecoderServer() {}

// UnsafeOnlineDecoderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnlineDecoderServer will
// result in compilation errors.
type UnsafeOnlineDecoderServer interface {
	mustEmbedUnimplementedOnlineDecoderServer()
}

func RegisterOnlineDecoderServer(s grpc.ServiceRegistrar, srv OnlineDecoderServer) {
	s.RegisterService(&OnlineDecoder_ServiceDesc, srv)
}

func _OnlineDecoder_Decode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OnlineDecoderServer).Decode(&onlineDecoderDecodeServer{stream})
}

type OnlineDecoder_DecodeServer interface {
	Send(*DecoderResponse) error
	Recv() (*DecoderRequest, error)
	grpc.ServerStream
}

type onlineDecoderDecodeServer struct {
	grpc.ServerStream
}

func (x *onlineDecoderDecodeServer) Send(m *DecoderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *onlineDecoderDecodeServer) Recv() (*DecoderRequest, error) {
	m := new(DecoderRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OnlineDecoder_ServiceDesc is the grpc.ServiceDesc for OnlineDecoder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnlineDecoder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "online_decoder.OnlineDecoder",
	HandlerType: (*OnlineDecoderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Decode",
			Handler:       _OnlineDecoder_Decode_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pronaia-stt-client.proto",
}
